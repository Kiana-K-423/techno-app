generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  name      String?
  password  String    @db.VarChar(255)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
}

model Room {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
  items     Item[]
}

model Categories {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
  items     Item[]
}

model Item {
  id           String        @id @default(uuid())
  name         String
  roomId       String
  categoryId   String
  quantity     Int           @default(0)
  unit         String
  price        Float         @default(0)
  image        String        @db.VarChar(255)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime?     @updatedAt
  deletedAt    DateTime?
  category     Categories    @relation(fields: [categoryId], references: [id])
  room         Room          @relation(fields: [roomId], references: [id])
  transactions Transaction[]
}

model Transaction {
  id            String          @id @default(uuid())
  uuid          String          @unique
  itemId        String
  customerId    String?
  quantity      Int
  type          String
  total         Float
  transaction   TransactionType
  orderingCosts Float?
  storageCosts  Float?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime?       @updatedAt
  deletedAt     DateTime?
  item          Item            @relation(fields: [itemId], references: [id])
  customer      Customer?        @relation(fields: [customerId], references: [id])
}

enum TransactionType {
  IN
  OUT
}

model Customer {
  id        String    @id @default(uuid())
  name      String
  phone     String
  address   String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  Transaction Transaction[]
}